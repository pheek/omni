//Datei: Xyz.src
//**************

/* Kommentare können auch Verschachtelt sein /* so wie dieser. */ */

// einzeilige Kommentare, wie in Java ...

// Datentypen gibt es
// sInt32 : Integer, ganze Zahl 32 Bit
// real64 : float 64 Bit (double)
// String : Java-Stirng // Java Klasse, daher groß
// boolean: true/false
// char   == sInt32


// Deklarationen wie in Pascal: Name Doppelpunkt Wert
x: sInt32
// Keine Semikolons nach den Anweisungen

// Zuweisung mit ":=" oder mit "←". Dies geht auch in die andere Richtung:
//  "=:" oder "→"
// Editoren für omni sollten später := in ← umwandeln
x ← 4

// Dafür gibt es eine automatische Typenerkennung vor dem Compile:
name ← "Philipp" // name wird automatisch "string"
y := 16.3        // y wird real64   --> Umwandlung in java: double y; y : = 16.3;
z := 8           // z wird sInt32
r ← true         // r wird boolean

x+4 → y


//Eine Initialzuweisung "int x = 4;" gibt es nicht
//Variable haben von sich aus den Wert 0/false

x ← x+1 // kann mit ++ abgekürtzt werden
x++     // ist jedoch ausschließlich eine Anweisung und kein Ausdruck!

y ← x++ // ist nicht möglich!!

// Println wird einfach print() genannt.
// Ein Print ohne newline wird mit printnnl() "print no newline" erzwungen.

print("Hallo Welt") 
printnnl("Eingabe: ");

x ← doIt()
doIt()                ---> Fehlermeldung (ist ein Fct, keine Procedur)
doIt2(4, "Gugus")
print ("Summe bis 5: " & sumBis(5))

verdoppeln(x : sInt32) : sInt32      // Declare function returning double
  ← 2 * x

print("Das doppelte von 7 ist" & verdoppeln(7))

doIt() : sInt32                  // Function: Returning sInt32
  sInt32 x ← 4
   ←  x + 2                      // Return value

doIt2(x: sInt32, z: String) :    // procedure returning nothing
  print("Hallo" & x & " " & z) 


sumBis(max: sInt32) : sInt32
  sum ← 0
  for sInt32i in 1 ... max
    sum ← sum + i
  ← sum

//////////////////////////////////////////////////////////////


+class Testklasse

  // alles, was oben an Deklaritionen (variable +
  //  Funktionsdefinitionen) vorhanden war, wird hierher kopiert

  +main(String[] a) : // produces "public static void main(String args[])"
	  // alles, was oben an "statements" definiert ist, findet hier statt.
    new Testklasse().top()
  
  sInt32 x   // Error: x wurde bereits als Globale Variable deklariert!

  top() :
    x ← 4
    printnnl("Hallo Welt") // print using "no new line"
    x := doIt()
    /// Fehlermeldung kann nicht kompiliert werden
    doIt2(4, "Gugus")
    System.out.println("Summe bis 5: " & sumBis(5));


  doIt() : sInt32     // Error: doIt wurde bereits deklariert!
    sInt x := 4
    x + 2
 

  doIt2(int x, String z) ;
    System.out.println("Hallo" & x & " " & z);
 

  sumBis(int max) : sInt32
    sInt32 sum := 0
    for(sInt32 i := 1; i <= max; inc(i)) 
      sum ← sum + i             (analog   inc(sum, i)) für den Var-Parameter sum
   
    return sum

// End class Testklasse

﻿// @date: 19. Jan. 2012
// @autor: phi
//
// erstes Testprogramm in "OMNI"

#package //ly/gress/omni/test

#import  //util/inc/*
#import  //util/date
#external import java/util/ArrayList

///////////////////////////////////////////////////

// Keine Strichpunkte am Ende einer Anweisung:

// Deklaration <name> : <Datentyp>
al: ArrayList<String>

// Zuweisung mittels Zuweisungspfeil
al ←  new ArrayList<String>

// Einfacher Output
print("Hallo Welt")

al.add("Hallo")
al.add("Welt" )

// Schlüsselwörter "for" und "in"
for w in 5 .. 10 {
  print ("Ausgabe " & w & ")
}
for w in al {
  print ("Ausgabe ", w)
}

// 'print' entspricht "System.out.println"
print ("Hallo Welt")

// Automatische Typenerkennung vor dem Compile (für boolean, string, char):
name ← "Philipp" // name wird automatisch "string"

// String concat mit "," (kein '&', kein '+' ...)
print ("Mein Name ist ", name)

// Typen können explizit vergeben werden (müssen auch für Zahlen).
x: sInt32
y: real64

x ← 8
// Wissenschafltiche Notation
y ← -7.3e-2

print ("Summe x + y = " & (x + y))
// evtl.
print ("Summe x + y = ", (x + y))

// '..'-Opreator definiert eine Sequenz
for i in 1 .. 99 { // i wird automatisch "int"
  print i & ". Zahl"
  // Mathematische Symbole und Zuweisung aus Unicode
  if(NOT (i ≥ 80) AND i ≠ 90 OR i = 40) { 
    print "Achtung groß oder speziell..."

// Bem.: Keine Sondersymbole für AND, OR, XOR und NOT.



ok: boolean

ok ← false OR (x > 4)

if(ok) 
  print("Alles in Butter")



i ← "Hallo" // i wurde nur lokal definiert, somit ist diseses i "frei".

// Switch am besten ganz verbannen oder durch den PL/I SELECT/WHEN ersetzen
// kein "break"!
// "-" == default
select(i) {
  1      : print "sehr schwach"
  2, 3, 4: print "na ja" 
  5      : print "sehr" 
  5, 6   : print "gut"
  "Hallo": print "das musste ja kommen"
  -: print "nicht definerter Wert"
}
bzw.
select() {
  when x = 1                  : print "sehr schwach"
  when x = 2 OR x = 3 OR x = 4: print "na ja"
  when x = 5                  : print "sehr "
  when x = 6                  : print "gut"
  when x = "Hallo"            : print "das muste ja kommen"
  -                           : "nicht definierter Wert"
}

// return mit einfachem Zuweisungszeichen bei letzter Anweisung.
sin(x: real64) : real64
 // Annaeherung
 // Zeilenumbruch für mehrzeilige Anweisungen 
  ← x - x*x*x/6 + x*x*x*x*x/120 - \ 
    x*x*x*x*x*x*x/(120*7*8)




// kein keyword "proc" für Subroutinen ohne Return, dafür ein : .
tenTimes() :
  for i in 1 .. 10 {
    print ("Hello World")

// keyword 'func' für funktionen mit return
// Datentyp "func(x)"
intregralBis10(f: func(x: int): real64) : real64 
  sum: real
	sum ←  0
  for i in 1..10 
    sum = sum + f(i)
  ← sum



// call lambda
t := tenTimesDo(sin())     


///////////////////////////////////
//         Objekte
//


// Test mit Kühen
k      ← new Kuh // k wird automatisch Typ "class Kuh"
k.name ← "vera"
k.jahr ← 1988
k.friss(2.5)
k      ← new Kuh(name ← "Anja", jahr ← 1955)
k.friss(3.5)
k.addGewicht(2.5)

k ← 7 // ERROR: k hat typ "Kuh"

// Analog Unicode: +: Public; -: Private
class Kuh {
  attr {
   +name: string
   +jahr: int
   -gewicht: real
  }

  init() : // empty constructor 
  
  check() :
    if (jahr < 1900) 
      throw exception("Jahr zu klein")
	
  
  addGewicht(kg: real) :
    inc(gewicht, kg) 
 
	
  proc friss(kg: real) :
    print name & " frisst "& kg& " kg."
 
// end Kuh


k = new Kalb(name ← "Vera", monat ← 3)
print (k) // "string()" wird aufgerufen
// Achtung: nur eine Klasse pro File und diese muss am Schluss stehen.
class Kalb is Kuh {
  attr {
   +monat: int
  }
  
  proc init() {
     jahr ← date.year
  }
  
  func string() : String { // entspricht in Java ToString
    ← "Kalb ", name, " ist geboren im monat ", monat
  }
}

enum Wochentag {
 MONTAG, DIENSTAG, MITTWOCH, DONNERSTAG, FREITAG, SAMSTAG, SONNTAG
}

for wt in Wochentag.elements() {
  print("noch ein Wochentag: ", wt)
}

// analog
for wt in 1 .. Wochentag.size() {
  print ("noch ein Wochentag: ", Wochentag.element(wt))
}


feld: real[] {3.8, 4.7e3, -6.9, 5.8} // Index 1..4
for x in feld { // x hat Datentyp "real"
  print (x + 10), " ist einfach groß"
}
feld[4] ← 4.8
